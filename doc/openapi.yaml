openapi: 3.0.0
info:
  description: A self-hosted web application created for managing bank accounts.
  version: "1.0.0"
  title: Home Accountant
  contact:
    name: Neakxs
    url: 'https://github.com/Neakxs'
  license:
    name: MIT
    url: 'https://github.com/Neakxs/home-accountant/blob/master/LICENSE'
servers:
  - url: 'https://example.homeaccountant.io/api/v1'
tags:
  - name: account
    description: Operations related to accounts management
  - name: subscription
    description: Operations dealing with recurrent transactions
  - name: transaction
    description: Operations related to transactions management
  - name: user
    description: Operations about user
paths:
  /account:
    get:
      parameters: 
        - in: query
          name: offset
          schema:
            type: integer
        - in: query
          name: quantity
          schema:
            type: integer
      tags:
        - account
      security:
        - bearerAuth: [auth]
      operationId: getAccounts
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountList'
        '401':
          description: Unauthorized
    post:
      tags:
        - account
      security :
        - bearerAuth: [auth]
      operationId: postAccount
      requestBody:
        required: True
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountS'
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request          
        '401':
          description: Unauthorized          
  /account/{id}:
    get:
      parameters: 
        - in: path
          name: id
          schema:
            type: integer
          required: true
      tags:
        - account
      security:
        - bearerAuth: [auth]
      operationId: getAccount
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountS'
        '401':
          description: Unauthorized
        '404':
          description: Not Found         
    put:
      parameters: 
        - in: path
          name: id
          schema:
            type: integer
          required: true
      tags:
        - account
      security:
        - bearerAuth: [auth]
      operationId: putAccount
      requestBody:
        required: True
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountS'      
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request           
        '401':
          description: Unauthorized
    delete:
      parameters: 
        - in: path
          name: id
          schema:
            type: integer
          required: true
      tags:
        - account
      security:
        - bearerAuth: [auth]
      operationId: deleteAccount
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
        '404':
          description: Not Found
  /user:
    get:
      tags:
        - user
      security: 
        - bearerAuth: [auth]
      summary: Get informations about a logged in user
      operationId: getUser
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInfo'
        '401':
          description: Unauthorized
    put:
      tags:
        - user
      security:
        - bearerAuth: [auth]
      summary: Update informations about logged in user
      operationId: putUser
      requestBody:
        required: True
        content:
          application/json:
            schema:
              anyOf:
                - $ref: '#/components/schemas/email'
                - $ref: '#/components/schemas/password'
                - $ref: '#/components/schemas/display_name'
            example: 
              display_name: John Doe
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
  /user/login:
    get:
      tags:
        - user
      security:
        - basicAuth: []
        - bearerAuth: [refresh]
      summary: Login a user to this API
      operationId: loginUser
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BearerToken'
        '401':
          description: Unauthorized
  /user/logout:
    get:
      tags:
        - user
      security:
        - bearerAuth: [auth]
      summary: Lougout a logged in user
      operationId: logoutUser
      responses:
        '200':
          description: OK
        '401':
          description: Unauthorized
  /user/confirm:
    get:
      tags:
        - user
      summary: Confirm user operation
      operationId: confirmUser
      responses:
        '200':
          description: OK
        '404':
          description: Not Found
  /user/register:
    post:
      tags:
        - user
      summary: Register a new user
      operationId: registerUser
      requestBody:
        required: True
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
        '403':
          description: Functionnality is disabled
components:
  schemas:
    Account:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        value:
          type: string
        acronym:
          type: string
    AccountS:
      type: object
      properties:
        name:
          type: string
        value:
          type: string
        acronym:
          type: string    
    AccountList:
      type: object
      properties:
        accounts:
          type: array
          items:
            $ref: '#/components/schemas/Account'
        quantity:
          type: integer
    BearerToken:
      type: object
      properties:
        auth_token:
          type: string
        refresh_token:
          type: string
    UserLogin:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
    UserInfo:
      type: object
      properties:
        email:
          type: string
          format: email
        display_name:
          type: string
    email:
      type: string
      format: email
    password:
      type: string
      format: password
    display_name:
      type: string
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT